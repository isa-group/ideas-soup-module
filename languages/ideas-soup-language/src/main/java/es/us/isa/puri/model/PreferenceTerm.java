/**
 * generated by http://RDFReactor.semweb4j.org ($Id: CodeGenerator.java 1535 2008-09-09 15:44:46Z max.at.xam.de $) on 4/10/15 20:45
 */
package es.us.isa.puri.model;

import org.ontoware.aifbcommons.collection.ClosableIterator;
import org.ontoware.rdf2go.exception.ModelRuntimeException;
import org.ontoware.rdf2go.model.Model;
import org.ontoware.rdf2go.model.node.BlankNode;
import org.ontoware.rdf2go.model.node.URI;
import org.ontoware.rdf2go.model.node.impl.URIImpl;
import org.ontoware.rdfreactor.runtime.Base;
import org.ontoware.rdfreactor.runtime.ReactorResult;

/**
 * This class manages access to these properties:
 * <ul>
 *   <li> HasOperands </li>
 *   <li> HasRankingMechanism </li>
 *   <li> RefersTo </li>
 * </ul>
 *
 * This class was generated by <a href="http://RDFReactor.semweb4j.org">RDFReactor</a> on 4/10/15 20:45
 */
public class PreferenceTerm extends Thing {

    /** http://www.isa.us.es/preferences#PreferenceTerm */
    @SuppressWarnings("hiding")
	public static final URI RDFS_CLASS = new URIImpl("http://www.isa.us.es/preferences#PreferenceTerm", false);

    /** http://www.isa.us.es/preferences#hasOperands */
    @SuppressWarnings("hiding")
	public static final URI HASOPERANDS = new URIImpl("http://www.isa.us.es/preferences#hasOperands",false);

    /** http://www.isa.us.es/preferences#hasRankingMechanism */
    @SuppressWarnings("hiding")
	public static final URI HASRANKINGMECHANISM = new URIImpl("http://www.isa.us.es/preferences#hasRankingMechanism",false);

    /** http://www.isa.us.es/preferences#refersTo */
    @SuppressWarnings("hiding")
	public static final URI REFERSTO = new URIImpl("http://www.isa.us.es/preferences#refersTo",false);

    /** 
     * All property-URIs with this class as domain.
     * All properties of all super-classes are also available. 
     */
    @SuppressWarnings("hiding")
    public static final URI[] MANAGED_URIS = {
      new URIImpl("http://www.isa.us.es/preferences#hasOperands",false),
      new URIImpl("http://www.isa.us.es/preferences#hasRankingMechanism",false),
      new URIImpl("http://www.isa.us.es/preferences#refersTo",false) 
    };


	// protected constructors needed for inheritance
	
	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.semweb4j.org
	 * @param classURI URI of RDFS class
	 * @param instanceIdentifier Resource that identifies this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c1] 
	 */
	protected PreferenceTerm ( Model model, URI classURI, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, classURI, instanceIdentifier, write);
	}

	// public constructors

	/**
	 * Returns a Java wrapper over an RDF object, identified by URI.
	 * Creating two wrappers for the same instanceURI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param instanceIdentifier an RDF2Go Resource identifying this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c2] 
	 */
	public PreferenceTerm ( Model model, org.ontoware.rdf2go.model.node.Resource instanceIdentifier, boolean write ) {
		super(model, RDFS_CLASS, instanceIdentifier, write);
	}


	/**
	 * Returns a Java wrapper over an RDF object, identified by a URI, given as a String.
	 * Creating two wrappers for the same URI is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param uriString a URI given as a String
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 * @throws ModelRuntimeException if URI syntax is wrong
	 *
	 * [Generated from RDFReactor template rule #c7] 
	 */
	public PreferenceTerm ( Model model, String uriString, boolean write) throws ModelRuntimeException {
		super(model, RDFS_CLASS, new URIImpl(uriString,false), write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by a blank node.
	 * Creating two wrappers for the same blank node is legal.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param bnode BlankNode of this instance
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c8] 
	 */
	public PreferenceTerm ( Model model, BlankNode bnode, boolean write ) {
		super(model, RDFS_CLASS, bnode, write);
	}

	/**
	 * Returns a Java wrapper over an RDF object, identified by 
	 * a randomly generated URI.
	 * Creating two wrappers results in different URIs.
	 * @param model RDF2GO Model implementation, see http://rdf2go.ontoware.org
	 * @param write if true, the statement (this, rdf:type, TYPE) is written to the model
	 *
	 * [Generated from RDFReactor template rule #c9] 
	 */
	public PreferenceTerm ( Model model, boolean write ) {
		super(model, RDFS_CLASS, model.newRandomUniqueURI(), write);
	}

    ///////////////////////////////////////////////////////////////////
    // typing

	/**
	 * Return an existing instance of this class in the model. No statements are written.
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return an instance of PreferenceTerm  or null if none existst
	 *
	 * [Generated from RDFReactor template rule #class0] 
	 */
	public static PreferenceTerm  getInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getInstance(model, instanceResource, PreferenceTerm.class);
	}

	/**
	 * Create a new instance of this class in the model. 
	 * That is, create the statement (instanceResource, RDF.type, http://www.isa.us.es/preferences#PreferenceTerm).
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class1] 
	 */
	public static void createInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.createInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 * @return true if instanceResource is an instance of this class in the model
	 *
	 * [Generated from RDFReactor template rule #class2] 
	 */
	public static boolean hasInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.hasInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as RDF resources
	 *
	 * [Generated from RDFReactor template rule #class3] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllInstances(Model model) {
		return Base.getAllInstances(model, RDFS_CLASS, org.ontoware.rdf2go.model.node.Resource.class);
	}

	/**
	 * @param model an RDF2Go model
	 * @return all instances of this class in Model 'model' as a ReactorResult,
	 * which can conveniently be converted to iterator, list or array.
	 *
	 * [Generated from RDFReactor template rule #class3-as] 
	 */
	public static ReactorResult<? extends PreferenceTerm> getAllInstances_as(Model model) {
		return Base.getAllInstances_as(model, RDFS_CLASS, PreferenceTerm.class );
	}

    /**
	 * Remove rdf:type PreferenceTerm from this instance. Other triples are not affected.
	 * To delete more, use deleteAllProperties
	 * @param model an RDF2Go model
	 * @param instanceResource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #class4] 
	 */
	public static void deleteInstance(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteInstance(model, RDFS_CLASS, instanceResource);
	}

	/**
	 * Delete all (this, *, *), i.e. including rdf:type
	 * @param model an RDF2Go model
	 * @param resource
	 */
	public static void deleteAllProperties(Model model,	org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.deleteAllProperties(model, instanceResource);
	}

    ///////////////////////////////////////////////////////////////////
    // property access methods

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HasLeftTerm' to this PreferenceTerm instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrefHasLeftTerm_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, CompositePreference.HASLEFTTERM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HasLeftTerm' to this PreferenceTerm instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrefHasLeftTerm_Inverse() {
		return Base.getAll_Inverse(this.model, CompositePreference.HASLEFTTERM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HasLeftTerm' to this PreferenceTerm instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPrefHasLeftTerm_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, CompositePreference.HASLEFTTERM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HasRightTerm' to this PreferenceTerm instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrefHasRightTerm_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, CompositePreference.HASRIGHTTERM, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HasRightTerm' to this PreferenceTerm instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrefHasRightTerm_Inverse() {
		return Base.getAll_Inverse(this.model, CompositePreference.HASRIGHTTERM, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HasRightTerm' to this PreferenceTerm instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPrefHasRightTerm_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, CompositePreference.HASRIGHTTERM, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HasRuleConclusion' to this PreferenceTerm instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrefHasRuleConclusion_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, FuzzyRulePreference.HASRULECONCLUSION, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HasRuleConclusion' to this PreferenceTerm instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrefHasRuleConclusion_Inverse() {
		return Base.getAll_Inverse(this.model, FuzzyRulePreference.HASRULECONCLUSION, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HasRuleConclusion' to this PreferenceTerm instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPrefHasRuleConclusion_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, FuzzyRulePreference.HASRULECONCLUSION, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}


	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as RDF resources, that have a relation 'HasRulePremise' to this PreferenceTerm instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1static] 
	 */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrefHasRulePremise_Inverse( Model model, Object objectValue) {
		return Base.getAll_Inverse(model, FuzzyRulePreference.HASRULEPREMISE, objectValue);
	}

	/**
	 * @return all A's as RDF resources, that have a relation 'HasRulePremise' to this PreferenceTerm instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse1dynamic] 
	 */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Resource> getAllPrefHasRulePremise_Inverse() {
		return Base.getAll_Inverse(this.model, FuzzyRulePreference.HASRULEPREMISE, this.getResource() );
	}

	/**
	 * @param model an RDF2Go model
	 * @param objectValue
	 * @return all A's as a ReactorResult, that have a relation 'HasRulePremise' to this PreferenceTerm instance
	 *
	 * [Generated from RDFReactor template rule #getallinverse-as1static] 
	 */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Resource> getAllPrefHasRulePremise_Inverse_as( Model model, Object objectValue) {
		return Base.getAll_Inverse_as(model, FuzzyRulePreference.HASRULEPREMISE, objectValue, org.ontoware.rdf2go.model.node.Resource.class);
	}



    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@64555d1a has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPrefHasOperands(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASOPERANDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@64555d1a has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPrefHasOperands() {
		return Base.has(this.model, this.getResource(), HASOPERANDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@64555d1a has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPrefHasOperands(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASOPERANDS);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@64555d1a has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPrefHasOperands( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASOPERANDS);
	}

     /**
     * Get all values of property HasOperands as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrefHasOperands_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASOPERANDS);
	}
	
    /**
     * Get all values of property HasOperands as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrefHasOperands_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASOPERANDS, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasOperands as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrefHasOperands_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASOPERANDS);
	}

    /**
     * Get all values of property HasOperands as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrefHasOperands_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASOPERANDS, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasOperands     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllPrefHasOperands(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASOPERANDS, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
	
    /**
     * Get all values of property HasOperands as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllPrefHasOperands_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASOPERANDS, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property HasOperands     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllPrefHasOperands() {
		return Base.getAll(this.model, this.getResource(), HASOPERANDS, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}

    /**
     * Get all values of property HasOperands as a ReactorResult of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<org.ontoware.rdfreactor.schema.rdfs.Resource> getAllPrefHasOperands_as() {
		return Base.getAll_as(this.model, this.getResource(), HASOPERANDS, org.ontoware.rdfreactor.schema.rdfs.Resource.class);
	}
 
    /**
     * Adds a value to property HasOperands as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPrefHasOperands( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASOPERANDS, value);
	}
	
    /**
     * Adds a value to property HasOperands as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPrefHasOperands( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASOPERANDS, value);
	}
    /**
     * Adds a value to property HasOperands from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPrefHasOperands(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(model, instanceResource, HASOPERANDS, value);
	}
	
    /**
     * Adds a value to property HasOperands from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPrefHasOperands(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.add(this.model, this.getResource(), HASOPERANDS, value);
	}
  

    /**
     * Sets a value of property HasOperands from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPrefHasOperands( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASOPERANDS, value);
	}
	
    /**
     * Sets a value of property HasOperands from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPrefHasOperands( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASOPERANDS, value);
	}
    /**
     * Sets a value of property HasOperands from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPrefHasOperands(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(model, instanceResource, HASOPERANDS, value);
	}
	
    /**
     * Sets a value of property HasOperands from an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPrefHasOperands(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.set(this.model, this.getResource(), HASOPERANDS, value);
	}
  


    /**
     * Removes a value of property HasOperands as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePrefHasOperands( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASOPERANDS, value);
	}
	
    /**
     * Removes a value of property HasOperands as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePrefHasOperands( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASOPERANDS, value);
	}
    /**
     * Removes a value of property HasOperands given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePrefHasOperands(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(model, instanceResource, HASOPERANDS, value);
	}
	
    /**
     * Removes a value of property HasOperands given as an instance of org.ontoware.rdfreactor.schema.rdfs.Resource 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePrefHasOperands(org.ontoware.rdfreactor.schema.rdfs.Resource value) {
		Base.remove(this.model, this.getResource(), HASOPERANDS, value);
	}
  
    /**
     * Removes all values of property HasOperands     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPrefHasOperands( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASOPERANDS);
	}
	
    /**
     * Removes all values of property HasOperands	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPrefHasOperands() {
		Base.removeAll(this.model, this.getResource(), HASOPERANDS);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62423e2f has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPrefHasRankingMechanism(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, HASRANKINGMECHANISM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62423e2f has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPrefHasRankingMechanism() {
		return Base.has(this.model, this.getResource(), HASRANKINGMECHANISM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62423e2f has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPrefHasRankingMechanism(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, HASRANKINGMECHANISM);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@62423e2f has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPrefHasRankingMechanism( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), HASRANKINGMECHANISM);
	}

     /**
     * Get all values of property HasRankingMechanism as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrefHasRankingMechanism_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, HASRANKINGMECHANISM);
	}
	
    /**
     * Get all values of property HasRankingMechanism as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrefHasRankingMechanism_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASRANKINGMECHANISM, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property HasRankingMechanism as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrefHasRankingMechanism_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), HASRANKINGMECHANISM);
	}

    /**
     * Get all values of property HasRankingMechanism as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrefHasRankingMechanism_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), HASRANKINGMECHANISM, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property HasRankingMechanism     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<RankingMechanism> getAllPrefHasRankingMechanism(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, HASRANKINGMECHANISM, RankingMechanism.class);
	}
	
    /**
     * Get all values of property HasRankingMechanism as a ReactorResult of RankingMechanism 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<RankingMechanism> getAllPrefHasRankingMechanism_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, HASRANKINGMECHANISM, RankingMechanism.class);
	}

    /**
     * Get all values of property HasRankingMechanism     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<RankingMechanism> getAllPrefHasRankingMechanism() {
		return Base.getAll(this.model, this.getResource(), HASRANKINGMECHANISM, RankingMechanism.class);
	}

    /**
     * Get all values of property HasRankingMechanism as a ReactorResult of RankingMechanism 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<RankingMechanism> getAllPrefHasRankingMechanism_as() {
		return Base.getAll_as(this.model, this.getResource(), HASRANKINGMECHANISM, RankingMechanism.class);
	}
 
    /**
     * Adds a value to property HasRankingMechanism as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPrefHasRankingMechanism( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, HASRANKINGMECHANISM, value);
	}
	
    /**
     * Adds a value to property HasRankingMechanism as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPrefHasRankingMechanism( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), HASRANKINGMECHANISM, value);
	}
    /**
     * Adds a value to property HasRankingMechanism from an instance of RankingMechanism 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPrefHasRankingMechanism(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, RankingMechanism value) {
		Base.add(model, instanceResource, HASRANKINGMECHANISM, value);
	}
	
    /**
     * Adds a value to property HasRankingMechanism from an instance of RankingMechanism 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPrefHasRankingMechanism(RankingMechanism value) {
		Base.add(this.model, this.getResource(), HASRANKINGMECHANISM, value);
	}
  

    /**
     * Sets a value of property HasRankingMechanism from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPrefHasRankingMechanism( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, HASRANKINGMECHANISM, value);
	}
	
    /**
     * Sets a value of property HasRankingMechanism from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPrefHasRankingMechanism( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), HASRANKINGMECHANISM, value);
	}
    /**
     * Sets a value of property HasRankingMechanism from an instance of RankingMechanism 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPrefHasRankingMechanism(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, RankingMechanism value) {
		Base.set(model, instanceResource, HASRANKINGMECHANISM, value);
	}
	
    /**
     * Sets a value of property HasRankingMechanism from an instance of RankingMechanism 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPrefHasRankingMechanism(RankingMechanism value) {
		Base.set(this.model, this.getResource(), HASRANKINGMECHANISM, value);
	}
  


    /**
     * Removes a value of property HasRankingMechanism as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePrefHasRankingMechanism( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, HASRANKINGMECHANISM, value);
	}
	
    /**
     * Removes a value of property HasRankingMechanism as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePrefHasRankingMechanism( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), HASRANKINGMECHANISM, value);
	}
    /**
     * Removes a value of property HasRankingMechanism given as an instance of RankingMechanism 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePrefHasRankingMechanism(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, RankingMechanism value) {
		Base.remove(model, instanceResource, HASRANKINGMECHANISM, value);
	}
	
    /**
     * Removes a value of property HasRankingMechanism given as an instance of RankingMechanism 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePrefHasRankingMechanism(RankingMechanism value) {
		Base.remove(this.model, this.getResource(), HASRANKINGMECHANISM, value);
	}
  
    /**
     * Removes all values of property HasRankingMechanism     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPrefHasRankingMechanism( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, HASRANKINGMECHANISM);
	}
	
    /**
     * Removes all values of property HasRankingMechanism	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPrefHasRankingMechanism() {
		Base.removeAll(this.model, this.getResource(), HASRANKINGMECHANISM);
	}
     /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2da07336 has at least one value set 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-static] 
     */
	public static boolean hasPrefRefersTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.has(model, instanceResource, REFERSTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2da07336 has at least one value set 
     * @return true if this property has at least one value
	 *
	 * [Generated from RDFReactor template rule #get0has-dynamic] 
     */
	public boolean hasPrefRefersTo() {
		return Base.has(this.model, this.getResource(), REFERSTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2da07336 has the given value (maybe among other values).  
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-static] 
     */
	public static boolean hasPrefRefersTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(model, instanceResource, REFERSTO);
	}

    /**
     * Check if org.ontoware.rdfreactor.generator.java.JProperty@2da07336 has the given value (maybe among other values).  
	 * @param value the value to be checked
     * @return true if this property contains (maybe among other) the given value
	 *
	 * [Generated from RDFReactor template rule #get0has-value-dynamic] 
     */
	public boolean hasPrefRefersTo( org.ontoware.rdf2go.model.node.Node value ) {
		return Base.hasValue(this.model, this.getResource(), REFERSTO);
	}

     /**
     * Get all values of property RefersTo as an Iterator over RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static] 
     */
	public static ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrefRefersTo_asNode(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_asNode(model, instanceResource, REFERSTO);
	}
	
    /**
     * Get all values of property RefersTo as a ReactorResult of RDF2Go nodes 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get7static-reactor-result] 
     */
	public static ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrefRefersTo_asNode_(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REFERSTO, org.ontoware.rdf2go.model.node.Node.class);
	}

    /**
     * Get all values of property RefersTo as an Iterator over RDF2Go nodes 
     * @return a ClosableIterator of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic] 
     */
	public ClosableIterator<org.ontoware.rdf2go.model.node.Node> getAllPrefRefersTo_asNode() {
		return Base.getAll_asNode(this.model, this.getResource(), REFERSTO);
	}

    /**
     * Get all values of property RefersTo as a ReactorResult of RDF2Go nodes 
     * @return a List of RDF2Go Nodes
	 *
	 * [Generated from RDFReactor template rule #get8dynamic-reactor-result] 
     */
	public ReactorResult<org.ontoware.rdf2go.model.node.Node> getAllPrefRefersTo_asNode_() {
		return Base.getAll_as(this.model, this.getResource(), REFERSTO, org.ontoware.rdf2go.model.node.Node.class);
	}
     /**
     * Get all values of property RefersTo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get11static] 
     */
	public static ClosableIterator<Property> getAllPrefRefersTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll(model, instanceResource, REFERSTO, Property.class);
	}
	
    /**
     * Get all values of property RefersTo as a ReactorResult of Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get11static-reactorresult] 
     */
	public static ReactorResult<Property> getAllPrefRefersTo_as(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		return Base.getAll_as(model, instanceResource, REFERSTO, Property.class);
	}

    /**
     * Get all values of property RefersTo     * @return a ClosableIterator of $type
	 *
	 * [Generated from RDFReactor template rule #get12dynamic] 
     */
	public ClosableIterator<Property> getAllPrefRefersTo() {
		return Base.getAll(this.model, this.getResource(), REFERSTO, Property.class);
	}

    /**
     * Get all values of property RefersTo as a ReactorResult of Property 
     * @return a ReactorResult of $type which can conveniently be converted to iterator, list or array
	 *
	 * [Generated from RDFReactor template rule #get12dynamic-reactorresult] 
     */
	public ReactorResult<Property> getAllPrefRefersTo_as() {
		return Base.getAll_as(this.model, this.getResource(), REFERSTO, Property.class);
	}
 
    /**
     * Adds a value to property RefersTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1static] 
     */
	public static void addPrefRefersTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.add(model, instanceResource, REFERSTO, value);
	}
	
    /**
     * Adds a value to property RefersTo as an RDF2Go node 
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #add1dynamic] 
     */
	public void addPrefRefersTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.add(this.model, this.getResource(), REFERSTO, value);
	}
    /**
     * Adds a value to property RefersTo from an instance of Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #add3static] 
     */
	public static void addPrefRefersTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Property value) {
		Base.add(model, instanceResource, REFERSTO, value);
	}
	
    /**
     * Adds a value to property RefersTo from an instance of Property 
	 *
	 * [Generated from RDFReactor template rule #add4dynamic] 
     */
	public void addPrefRefersTo(Property value) {
		Base.add(this.model, this.getResource(), REFERSTO, value);
	}
  

    /**
     * Sets a value of property RefersTo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be set
	 *
	 * [Generated from RDFReactor template rule #set1static] 
     */
	public static void setPrefRefersTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.set(model, instanceResource, REFERSTO, value);
	}
	
    /**
     * Sets a value of property RefersTo from an RDF2Go node.
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set1dynamic] 
     */
	public void setPrefRefersTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.set(this.model, this.getResource(), REFERSTO, value);
	}
    /**
     * Sets a value of property RefersTo from an instance of Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set3static] 
     */
	public static void setPrefRefersTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Property value) {
		Base.set(model, instanceResource, REFERSTO, value);
	}
	
    /**
     * Sets a value of property RefersTo from an instance of Property 
     * First, all existing values are removed, then this value is added.
     * Cardinality constraints are not checked, but this method exists only for properties with
     * no minCardinality or minCardinality == 1.
	 * @param value the value to be added
	 *
	 * [Generated from RDFReactor template rule #set4dynamic] 
     */
	public void setPrefRefersTo(Property value) {
		Base.set(this.model, this.getResource(), REFERSTO, value);
	}
  


    /**
     * Removes a value of property RefersTo as an RDF2Go node 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1static] 
     */
	public static void removePrefRefersTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(model, instanceResource, REFERSTO, value);
	}
	
    /**
     * Removes a value of property RefersTo as an RDF2Go node
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove1dynamic] 
     */
	public void removePrefRefersTo( org.ontoware.rdf2go.model.node.Node value) {
		Base.remove(this.model, this.getResource(), REFERSTO, value);
	}
    /**
     * Removes a value of property RefersTo given as an instance of Property 
     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove3static] 
     */
	public static void removePrefRefersTo(Model model, org.ontoware.rdf2go.model.node.Resource instanceResource, Property value) {
		Base.remove(model, instanceResource, REFERSTO, value);
	}
	
    /**
     * Removes a value of property RefersTo given as an instance of Property 
	 * @param value the value to be removed
	 *
	 * [Generated from RDFReactor template rule #remove4dynamic] 
     */
	public void removePrefRefersTo(Property value) {
		Base.remove(this.model, this.getResource(), REFERSTO, value);
	}
  
    /**
     * Removes all values of property RefersTo     * @param model an RDF2Go model
     * @param resource an RDF2Go resource
	 *
	 * [Generated from RDFReactor template rule #removeall1static] 
     */
	public static void removeAllPrefRefersTo( Model model, org.ontoware.rdf2go.model.node.Resource instanceResource) {
		Base.removeAll(model, instanceResource, REFERSTO);
	}
	
    /**
     * Removes all values of property RefersTo	 *
	 * [Generated from RDFReactor template rule #removeall1dynamic] 
     */
	public void removeAllPrefRefersTo() {
		Base.removeAll(this.model, this.getResource(), REFERSTO);
	}
 }